# -*- coding: utf-8 -*-
"""250725_for_park_gwajangnim.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BVxuNxK0fOk2-cpP9N7Jm_zCauCagJ4U
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

st.set_page_config(page_title="EDA Dashboard", layout="wide")
st.title("📊 Interactive CSV Data EDA Dashboard")

# Sidebar – File Upload
st.sidebar.header("1. Upload CSV File")
uploaded_file = st.sidebar.file_uploader("Upload your CSV", type=["csv"])

# If file is uploaded
if uploaded_file:
    df = pd.read_csv(uploaded_file)
    st.success("✅ File uploaded and data loaded successfully!")

    st.sidebar.header("2. Column Filters")

    # Detect columns
    num_cols = df.select_dtypes(include="number").columns.tolist()
    cat_cols = df.select_dtypes(include="object").columns.tolist()
    date_cols = df.select_dtypes(include=["datetime", "datetime64[ns]"]).columns.tolist()

    # Attempt to parse dates
    for col in df.columns:
        try:
            df[col] = pd.to_datetime(df[col])
            if col not in date_cols:
                date_cols.append(col)
        except:
            continue

    # ========== LINE PLOT ==========
    st.subheader("📈 Trend Line Plot")
    if date_cols and num_cols:
        line_date_col = st.selectbox("Date Column", date_cols)
        line_y_col = st.selectbox("Numeric Column", num_cols)

        line_df = df[[line_date_col, line_y_col]].dropna()
        line_df = line_df.sort_values(line_date_col)

        fig_line = px.line(line_df, x=line_date_col, y=line_y_col, title=f"{line_y_col} over {line_date_col}")
        st.plotly_chart(fig_line, use_container_width=True)
    else:
        st.info("ℹ️ No date or numeric column available for line plot.")

    # ========== CATEGORICAL BAR PLOT ==========
    st.subheader("📊 Categorical Histogram")
    if cat_cols and num_cols:
        cat_col = st.selectbox("Categorical Column", cat_cols)
        value_col = st.selectbox("Value Column", num_cols)

        agg_df = df.groupby(cat_col)[value_col].mean().reset_index()

        fig_bar = px.bar(agg_df, x=cat_col, y=value_col, title=f"{value_col} by {cat_col}")
        st.plotly_chart(fig_bar, use_container_width=True)
    else:
        st.info("ℹ️ Need at least one categorical and one numeric column for bar plot.")

    # ========== SCATTER PLOT ==========
    st.subheader("🧭 Scatter Plot")
    if len(num_cols) >= 2:
        x_axis = st.selectbox("X Axis", num_cols, index=0)
        y_axis = st.selectbox("Y Axis", num_cols, index=1)

        fig_scatter = px.scatter(df, x=x_axis, y=y_axis, color=cat_cols[0] if cat_cols else None)
        st.plotly_chart(fig_scatter, use_container_width=True)
    else:
        st.warning("⚠️ Need at least two numeric columns for scatter plot.")

    # ========== SUMMARY STATISTICS ==========
    with st.expander("📋 Summary Statistics"):
        st.write("**Numeric Columns**")
        st.dataframe(df[num_cols].describe())

        if cat_cols:
            st.write("**Categorical Columns**")
            cat_summary = df[cat_cols].describe(include="object").T
            st.dataframe(cat_summary)

    # ========== RAW DATA ==========
    with st.expander("🧾 Raw Data"):
        st.dataframe(df)

else:
    st.info("👈 Upload a CSV file to get started.")